AWSTemplateFormatVersion: 2010-09-09 

Description: >-
    Creates the registry cluster of docker containers and related service for the APTrust environments. 
    These resources may be needed to scale frequently
    and be updated to be kept secure. 

Parameters:
  
  DNS:
    Description: Staging private Namespace
    Type: String
    Default: staging
    AllowedValues: 
      - staging 
      - demo 
      - prod
  
  FamTag:
    Description: Provides a family tag based on the environment for the family of each container/task definition; (p)rod, (s)taging, (d)emo.
    Type: String
    Default: s 
    AllowedValues: 
      - s 
      - d 
      - p
  
  ClusterName: 
    Description: The Name of the Fargate cluster hosting NSQ services.
    Type: String
    Default: ecs-registry-staging 
    AllowedValues: 
      - ecs-registry-staging
      - ecs-registry-demo
      - ecs-registry-prod

Resources:
  
  NSQCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties: 
      CapacityProviders: 
        - FARGATE
        - FARGATE_SPOT 
      Cluster: !Ref Cluster
      DefaultCapacityProviderStrategy: 
        - CapacityProvider: FARGATE 
          Weight: 1
          Base: 1 
        - CapacityProvider: FARGATE_SPOT 
          Weight: 1 
          Base: 0

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName 
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled 
      Configuration: 
        ExecuteCommandConfiguration: 
          Logging: OVERRIDE
          LogConfiguration:
            CloudWatchLogGroupName: !Sub '/ecs/${DNS}/registry'
      Tags:
      - Key: Name
        Value: !Sub 'ecs-registry-${DNS}'
      - Key: Environment
        Value: !Ref DNS
      - Key: Service 
        Value: registry

  
  LogGroup:
    Properties:
      LogGroupName: !Sub '/ecs/${DNS}/registry' 
      Tags: 
      - Key: Environment 
        Value: !Ref DNS
      - Key: Service 
        Value: registry 
    Type: AWS::Logs::LogGroup

  RegistryService: 
    DependsOn: ListenerReg80 
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1 
      EnableExecuteCommand: true
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: registry
          ContainerPort: 8080
          TargetGroupArn: !Ref RegistryTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Fn::ImportValue: !Sub "UnifiedSecurityGroup-${DNS}"
          - Fn::ImportValue: !Sub "RegistrySecurityGroup-${DNS}"
          Subnets:
          - Fn::ImportValue: !Sub "PrivateSubnet0-${DNS}"
          - Fn::ImportValue: !Sub "PrivateSubnet1-${DNS}"
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceName: ecs-registry
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - RegistryServiceDiscoveryEntry
          - Arn
      Tags:  
      - Key: Service
        Value: nsq
      - Key: Environment
        Value: !Ref "DNS"
      TaskDefinition: !Ref RegistryTaskDefinition
   
  RegistryServiceDiscoveryEntry: 
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: '"registry" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: registry
      NamespaceId:
        Fn::ImportValue: !Sub "NameSpace-${DNS}"
  
  RegistryTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - !Ref DNS
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: sidecar
        Name: Nsqadmin_ResolvConf_InitContainer
      - Command:
        - ./main
        DependsOn:
        - Condition: SUCCESS
          ContainerName: Nsqadmin_ResolvConf_InitContainer
        Essential: true 
        Image: docker.io/aptrust/registry:multi 
        Secrets:
        - Name: APT_ENV
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/APT_ENV
        - Name: LOG_DIR
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/LOG_DIR
        - Name: AUTHY_API_KEY
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/AUTHY_API_KEY
        - Name: AWS_ACCESS_KEY_ID
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/AWS_ACCESS_KEY_ID
        - Name: AWS_REGION
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/AWS_REGION
        - Name: AWS_SECRET_ACCESS_KEY
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/AWS_SECRET_ACCESS_KEY
        - Name: COOKIE_BLOCK_KEY
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/COOKIE_BLOCK_KEY
        - Name: COOKIE_DOMAIN
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/COOKIE_DOMAIN
        - Name: COOKIE_HASH_KEY
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/COOKIE_HASH_KEY
        - Name: DB_DRIVER
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_DRIVER
        - Name: DB_HOST
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_HOST
        - Name: DB_PASSWORD
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_PASSWORD
        - Name: DB_PORT
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_PORT
        - Name: DB_ROOT_PASSWORD
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_ROOT_PASSWORD
        - Name: DB_ROOT_USER
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_ROOT_USER
        - Name: DB_USER
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_USER
        - Name: DB_NAME
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_NAME
        - Name: DB_USE_SSL
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/DB_USE_SSL
        - Name: EMAIL_ENABLED
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/EMAIL_ENABLED
        - Name: EMAIL_FROM_ADDRESS
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/EMAIL_FROM_ADDRESS
        - Name: ENABLE_TWO_FACTOR_AUTHY
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/ENABLE_TWO_FACTOR_AUTHY
        - Name: ENABLE_TWO_FACTOR_SMS
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/ENABLE_TWO_FACTOR_SMS
        - Name: FLASH_COOKIE_NAME
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/FLASH_COOKIE_NAME
        - Name: HTTPS_COOKIES
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/HTTPS_COOKIES
        - Name: LOG_CALLER
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/LOG_CALLER
        - Name: LOG_FILE
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/LOG_FILE
        - Name: LOG_LEVEL
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/LOG_LEVEL
        - Name: LOG_SQL
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/LOG_SQL
        - Name: LOG_TO_CONSOLE
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/LOG_TO_CONSOLE
        - Name: OTP_EXPIRATION
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/OTP_EXPIRATION
        - Name: PREFS_COOKIE_NAME
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/PREFS_COOKIE_NAME
        - Name: REDIS_DEFAULT_DB
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/REDIS_DEFAULT_DB
        - Name: SESSION_COOKIE_NAME
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/SESSION_COOKIE_NAME
        - Name: SESSION_MAX_AGE
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/REGISTRY/SESSION_MAX_AGE
        - Name: NSQ_URL
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/PRESERV/NSQ_URL
        - Name: REDIS_URL
          ValueFrom: arn:aws:ssm:us-east-1:997427182289:parameter/STAGING/PRESERV/REDIS_URL
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: registry
        Name: registry
        PortMappings:
        - ContainerPort: 8080
          Protocol: tcp
      Cpu: "256"
      Memory: "512"
      TaskRoleArn: 
        Fn::ImportValue: !Sub "FargateIAMRole-${DNS}" 
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "ECSServiceRole-${DNS}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE 
      Family: !Sub 'ecs-registry-${FamTag}'
  

  ListenerReg80: 
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        DefaultActions:
          - RedirectConfig:
              Host: "#{host}"
              Port: 443
              StatusCode: "HTTP_301"
              Protocol: "HTTPS"
            Type: redirect
        LoadBalancerArn: 
          Fn::ImportValue: !Sub 'AppLoad-${DNS}'
        Port: 80
        Protocol: HTTP
  
  ListenerReg443:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups: 
            - TargetGroupArn: !Ref RegistryTargetGroup
      LoadBalancerArn: 
        Fn::ImportValue: !Sub 'AppLoad-${DNS}'
      Certificates:
        - CertificateArn: 'arn:aws:acm:us-east-1:997427182289:certificate/14e2fca8-7668-4c0e-a07a-62a19e9032d9'
      Port: 443
      Protocol: HTTPS

  RegistryTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "registry-targetgroup-${DNS}"
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Service
        Value: registry
      - Key: Environment
        Value: !Ref 'DNS'
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "vpc-apt-${DNS}"  
